{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Menu related API calls\nexport const getMenuItems = async (search = '') => {\n  try {\n    const response = await api.get(`/menu?search=${search}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching menu items:', error.message);\n    console.error('Error details:', error.response ? error.response.data : 'No response data');\n    console.error('Request URL:', error.config ? error.config.url : 'URL not available');\n    console.error('Request method:', error.config ? error.config.method : 'Method not available');\n    throw error;\n  }\n};\n\n// Order related API calls\nexport const placeOrder = async orderDetails => {\n  try {\n    const response = await api.post('/orders', orderDetails);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to place order');\n  }\n};\nexport const getOrderStatus = async orderId => {\n  try {\n    const response = await api.get(`/orders/${orderId}/status`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch order status');\n  }\n};\nexport const getOrderHistory = async userId => {\n  try {\n    const response = await api.get(`/users/${userId}/orders`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch order history');\n  }\n};\n\n// User related API calls\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  } catch (error) {\n    throw new Error('Login failed');\n  }\n};\nexport const register = async userData => {\n  try {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Registration failed');\n  }\n};\nexport const getUserProfile = async userId => {\n  try {\n    const response = await api.get(`/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch user profile');\n  }\n};\nexport const updateUserProfile = async (userId, userData) => {\n  try {\n    const response = await api.put(`/users/${userId}`, userData);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to update user profile');\n  }\n};\n\n// Cart related API calls (if you decide to store cart on the server)\nexport const getCart = async userId => {\n  try {\n    const response = await api.get(`/users/${userId}/cart`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch cart');\n  }\n};\nexport const updateCart = async (userId, cartItems) => {\n  try {\n    const response = await api.put(`/users/${userId}/cart`, {\n      items: cartItems\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to update cart');\n  }\n};\n\n// Review related API calls submit review\nexport const submitReview = async reviewData => {\n  try {\n    const response = await axios.post(`${API_URL}/reviews`, reviewData);\n    return response.data;\n  } catch (error) {\n    console.error('Error submitting review:', error);\n    throw error;\n  }\n};\nexport const getReviews = async menuItemId => {\n  try {\n    const response = await api.get(`/menu/${menuItemId}/reviews`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch reviews');\n  }\n};\n\n// Chat support API call\nexport const sendChatMessage = async message => {\n  try {\n    const response = await api.post('/chat', {\n      message\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to send chat message');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","getMenuItems","search","response","get","data","console","message","url","method","placeOrder","orderDetails","post","Error","getOrderStatus","orderId","getOrderHistory","userId","login","credentials","register","userData","getUserProfile","updateUserProfile","put","getCart","updateCart","cartItems","items","submitReview","reviewData","getReviews","menuItemId","sendChatMessage"],"sources":["C:/Users/linga/veg app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include the auth token\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Menu related API calls\r\nexport const getMenuItems = async (search = '') => {\r\n  try {\r\n    const response = await api.get(`/menu?search=${search}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching menu items:', error.message);\r\n    console.error('Error details:', error.response ? error.response.data : 'No response data');\r\n    console.error('Request URL:', error.config ? error.config.url : 'URL not available');\r\n    console.error('Request method:', error.config ? error.config.method : 'Method not available');\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Order related API calls\r\nexport const placeOrder = async (orderDetails) => {\r\n  try {\r\n    const response = await api.post('/orders', orderDetails);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to place order');\r\n  }\r\n};\r\n\r\nexport const getOrderStatus = async (orderId) => {\r\n  try {\r\n    const response = await api.get(`/orders/${orderId}/status`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch order status');\r\n  }\r\n};\r\n\r\nexport const getOrderHistory = async (userId) => {\r\n  try {\r\n    const response = await api.get(`/users/${userId}/orders`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch order history');\r\n  }\r\n};\r\n\r\n// User related API calls\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Login failed');\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Registration failed');\r\n  }\r\n};\r\n\r\nexport const getUserProfile = async (userId) => {\r\n  try {\r\n    const response = await api.get(`/users/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch user profile');\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = async (userId, userData) => {\r\n  try {\r\n    const response = await api.put(`/users/${userId}`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to update user profile');\r\n  }\r\n};\r\n\r\n// Cart related API calls (if you decide to store cart on the server)\r\nexport const getCart = async (userId) => {\r\n  try {\r\n    const response = await api.get(`/users/${userId}/cart`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch cart');\r\n  }\r\n};\r\n\r\nexport const updateCart = async (userId, cartItems) => {\r\n  try {\r\n    const response = await api.put(`/users/${userId}/cart`, { items: cartItems });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to update cart');\r\n  }\r\n};\r\n\r\n// Review related API calls submit review\r\nexport const submitReview = async (reviewData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/reviews`, reviewData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error submitting review:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getReviews = async (menuItemId) => {\r\n  try {\r\n    const response = await api.get(`/menu/${menuItemId}/reviews`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch reviews');\r\n  }\r\n};\r\n\r\n// Chat support API call\r\nexport const sendChatMessage = async (message) => {\r\n  try {\r\n    const response = await api.post('/chat', { message });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to send chat message');\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}